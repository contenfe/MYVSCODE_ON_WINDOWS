单例模式：不能被实例化，构造函数被私有化，只能通过静态方法调用它
工厂模式：用来创建大量相同的对象，（游戏中的小兵），通过一个工厂类，和一个抽象对象类，
        工厂类通过抽象类参数传进的参数来确定生成对象
抽象工厂：抽象工厂一个将工厂也抽象化，产品抽象化，通过创建不同的工厂创建不同的种类，像不同的公司，创造不同品牌的手机一样
建造者: 将一个复杂对象的构建与它的表示分离，同样的构建过程可以创建不同的形式
原型：将一个对象创建给另一个要构建的对象
备忘录：将一个状态保存下了，并不改变这个状态

二：
int Calc()
{

    int sum[10000]={1,1};
    int res = 1;
    for(int i=1;i<n;i++)
        {
            res=sum[i-1]+sum[i];
            sum[i+1] = sum[i]+sum[i-1];
        }
    return res;

}


三：选择第一题，选择c++
#include <iostream>
using namespace std;

void Print(int* num)
{
    
    for (int i = 0; i <= 3; i++)
    {
        for (int j = i + 1; j <= 4; j++)
        {
            for (int k = j + 1; k <= 5; k++)
            {
                for (int l = k + 1; l <= 6; l++)
                {
                    for (int n = l + 1; n <= 7; n++)
                    {
                        for (int m = n + 1; m <= 8; m++)
                        {
                            cout << num[i] << num[j] << num[k] << num[l] << num[n] << num[m] << endl;
                            cout << endl;
                        }
                    }
                }
            }
        }
    }
}

int main()
{

    int num[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
    Print(num);
    return 0;
}



四：

俄罗斯方块
流程：
    1.进入main函数
    2.进入两层死循环，一层用来运行程序，一层进行游戏
    3.产生方块，使用结构体构建方块，使用二维数组作为地图
    4.方块向下移动 方块x坐标加+1,y不变
    5.检测用户输入 
    6.根据用户输入更改方块在数组的位置(ASD)，
    7.根据输入更改方块的形状（w）
    8.从最大的行扫描，入满了，这 map[max][0] = map[max-1][0],在窗口 看到的上面一行替换下面的，一直循环，直到第0行，才扫完每一行
    9.判断失败条件，产生的方块位置在产生点
    10.结束游戏循环
    11.打印结果
    12.等待用户输入是否在继续完，否则跳出循环，结束程序
